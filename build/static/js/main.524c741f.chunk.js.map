{"version":3,"sources":["App.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","API_URL","SOCKET_URL","state","data","inputData","getData","bind","assertThisInitialized","click","change","postData","_this2","socket","io","on","console","log","emit","concat","msg","_this3","fetch","then","response","json","setState","catch","error","method","headers","Content-Type","body","JSON","stringify","info","event","input","target","value","list","map","elm","index","react_default","a","createElement","key","className","onChange","type","onClick","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"4PA0FeA,cAlFX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KALVQ,QAAU,4BAISP,EAcnBQ,WAAa,+BAXTR,EAAKS,MAAQ,CACTC,KAAM,GACNC,UAAW,IAGfX,EAAKY,QAAUZ,EAAKY,QAAQC,KAAbZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACfA,EAAKe,MAAQf,EAAKe,MAAMF,KAAXZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACbA,EAAKgB,OAAShB,EAAKgB,OAAOH,KAAZZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACdA,EAAKiB,SAAWjB,EAAKiB,SAASJ,KAAdZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAXDA,mFAeC,IAAAkB,EAAAf,KACVgB,EAASC,IAAG,gCAClBD,EAAOE,GAAG,UAAW,WACjBC,QAAQC,IAAI,2BACZJ,EAAOK,KAAK,QAAS,WAAY,WAErCL,EAAOE,GAAG,WAAY,SAACX,GACnBY,QAAQC,IAAR,eAAAE,OAA2Bf,EAAKgB,MAChCR,EAAKN,8CAIH,IAAAe,EAAAxB,KACNyB,MAAK,GAAAH,OAAItB,KAAKI,QAAT,UACAsB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAnB,GACFiB,EAAKK,SAAS,CACVtB,KAAMA,MAGbuB,MAAM,SAAAC,GACHZ,QAAQY,MAAM,wBAAyBA,sCAI1CxB,GACLkB,MAAK,GAAAH,OAAItB,KAAKI,QAAT,SAAyB,CAC1B4B,OAAQ,OACRC,QAAS,CACLC,eAAgB,mCAEpBC,KAAMC,KAAKC,UAAU,CAAE9B,KAAMA,MAE5BmB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAnB,GAAI,OAAIY,QAAQmB,KAAK/B,KAC1BuB,MAAM,SAAAC,GACHZ,QAAQY,MAAM,uBAAwBA,oCAI3CQ,GACHvC,KAAK6B,SAAS,CAAEW,MAAOD,EAAME,OAAOC,wCAIpCvB,QAAQC,IAAI,QAASpB,KAAKM,MAAMkC,OAChCxC,KAAKc,SAASd,KAAKM,MAAMkC,wCAIzB,IAAIG,EAAO3C,KAAKM,MAAMC,KAAKqC,IAAI,SAACC,EAAKC,GAAN,OAAgBC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GAAQD,KAChE,OACIE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,qCAEAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,UACKN,GAELI,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SAAOG,SAAUpD,KAAKa,OAAQwC,KAAK,SACnCN,EAAAC,EAAAC,cAAA,UAAQK,QAAStD,KAAKY,OAAtB,gBAjFE2C,aCClBC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.524c741f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport io from 'socket.io-client';\n\nclass App extends Component {\n    API_URL = 'http://localhost:8080/api'\n    \n    //process.env.REACT_APP_API_URL;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [],\n            inputData: \"\"\n        };\n\n        this.getData = this.getData.bind(this);\n        this.click = this.click.bind(this);\n        this.change = this.change.bind(this);\n        this.postData = this.postData.bind(this);\n    }\n\n    SOCKET_URL = 'http://localhost:8080/my_app';\n    componentDidMount() {\n        const socket = io('http://localhost:8080/my_app');\n        socket.on('connect', () => {\n            console.log(\"Connected to socket.io!\");\n            socket.emit('hello', \"Kristian\", \"howdy\");\n        });\n        socket.on('new-data', (data) => {\n            console.log(`server msg: ${data.msg}`);\n            this.getData(); // Get the new data using fetch!\n        });\n    }\n\n    getData() {\n        fetch(`${this.API_URL}/data`)\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    data: data\n                });\n            })\n            .catch(error => {\n                console.error(\"Error when fetching: \", error);\n            })\n    }\n\n    postData(data) {\n        fetch(`${this.API_URL}/data`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\"\n            },\n            body: JSON.stringify({ data: data })\n        })\n            .then(response => response.json())\n            .then(data => console.info(data))\n            .catch(error => {\n                console.error(\"Error when posting: \", error);\n            })\n    }\n\n    change(event) {\n        this.setState({ input: event.target.value })\n    }\n\n    click() {\n        console.log(\"click\", this.state.input);\n        this.postData(this.state.input);\n    }\n\n    render() {\n        let list = this.state.data.map((elm, index) => <li key={index}>{elm}</li>);\n        return (\n            <div className=\"container\">\n                <h1>MERN Deployment Example</h1>\n\n                <p>Data from API:</p>\n                <ol>\n                    {list}\n                </ol>\n                <p>Post new data:</p>\n                <input onChange={this.change} type=\"text\" />\n                <button onClick={this.click}>Post</button>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}